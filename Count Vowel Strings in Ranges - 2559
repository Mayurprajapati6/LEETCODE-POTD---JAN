                            APPROACH -> 1  ( TLE )

class Solution {
public:

   // TC = O(q * s)
   // SC = O(1)    // but if you consider result vector then it could be O(n) . here i will not consider beacuse it's required for the answer.

    vector<int> vowelStrings(vector<string>& words, vector<vector<int>>& queries) {

        int q = queries.size();

        vector<int>result;

    // Below two for loop for finding 0 the and 1 element for each index in 2-D vector here in queries 
   // using iterator and auto for loop

        //for (auto it = queries.begin(); it != queries.end(); ++it) {
          //int left = (*it)[0];  // First element of the query
          //int right = (*it)[1]; // Second element of the query
        
        //}

        for(auto &q: queries ) {   // O(q)
            int left = q[0];
            int right =q[1];
            int cnt = 0;

            for(int m=left;m<=right;m++) {   // O(s) -> in worst case
                string n = words[m];
                int s = n.size();

                if((n[0]=='a' || n[0]=='e' || n[0]=='i' || n[0]=='o' || n[0]=='u') &&        // O(1)
                   (n[s-1]=='a' || n[s-1]=='e' || n[s-1]=='i' || n[s-1]=='o' || n[s-1]=='u')
                ) {
                    cnt++;
                }
            }

            result.push_back(cnt);
        }
        return result;
    }
};

------------------------------------------------------------------------XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX------------------------------------------------------------------------


                APPROACH - 2

class Solution {
public:

    // TC = O(N + Q)
    // SC = O(n)  // for cummulative sum

    bool isVowel(char &ch) { // O(1)
        if(ch == 'a' || ch == 'e' || ch == 'i' || ch =='o' || ch == 'u') {
            return true;
        }
        return false;
    } 
    vector<int> vowelStrings(vector<string>& words, vector<vector<int>>& queries) {


        int Q = queries.size();
        int N = words.size();

        vector<int>result(Q);

        vector<int>cumSum(N);  // SC = O(n)

        int sum = 0;

        for(int i=0;i<N;i++) {  // TC = O(N)
            if(isVowel(words[i][0]) && isVowel(words[i].back())) {
                sum++;
            }
            cumSum[i] = sum;
        }

        for(int i=0;i<Q;i++) {  // TC = O(Q)
            int left = queries[i][0];
            int right = queries[i][1];

            result[i] = cumSum[right] - ((left > 0) ? cumSum[left-1] : 0);
        }
        return result;
    }
};
