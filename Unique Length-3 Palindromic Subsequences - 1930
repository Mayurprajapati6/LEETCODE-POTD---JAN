-------------------  APPRAOCH - 1 ------------------------

//T.C : O(n)
//S.C : O(1) - Only 26 sized always

class Solution {
public:

    int countPalindromicSubsequence(string s) {
        int n = s.length();
        vector<pair<int,int>>indices(26,{-1,-1});

        for(int i=0;i<n;i++){ 
            char ch = s[i];
            int idx = ch - 'a';  // a=0 , b=1 ...
            if(indices[idx].first == -1) {
                indices[idx].first = i;
            }
            indices[idx].second = i;
        }

        int result = 0;

        for(int i=0;i<26;i++) {  // O(26)
            // i=0 -> a

            int left_idx = indices[i].first;
            int right_idx = indices[i].second;

            if(left_idx == -1) {
                continue;
            }

            unordered_set<char>st;

            for(int middle = left_idx+1;middle<=right_idx-1;middle++) { // O(N)
                st.insert(s[middle]);
            }

            result += st.size();
        }
        return result;
        
    }
};
